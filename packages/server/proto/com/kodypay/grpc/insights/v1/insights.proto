syntax = "proto3";

package com.kodypay.grpc.insights.v1;

import "google/protobuf/timestamp.proto";
import "options/team.proto";
import "com/kodypay/grpc/common/money.proto";

option java_multiple_files = true;
option java_outer_classname = "InsightsProto";
option java_package = "com.kodypay.grpc.insights.v1";

service KpInsightsService {
  option (options.team) = SOFTWARE_SERVICES;
  rpc GetCustomerTransactionsChart(CustomerTransactionsChartRequest) returns (CustomerTransactionsChartResponse);
  rpc GetCustomerTransactionsStats(CustomerTransactionsStatsRequest) returns (CustomerTransactionsStatsResponse);
  // Deprecated
  rpc GetQuartilePointsChart(QuartilePointsChartRequest) returns (QuartilePointsChartResponse);
  rpc GetSpendingDistributionChart(SpendingDistributionChartRequest) returns (SpendingDistributionChartResponse);
  rpc GetRevenueStoreVisitsChart(GetRevenueStoreVisitsChartRequest) returns (GetRevenueStoreVisitsChartResponse);
  rpc GetShopperTransactions(GetShopperTransactionsRequest) returns (GetShopperTransactionsResponse);
}

message GetShopperTransactionsRequest {
  string store_id = 1;
  string shopper_identifier_id = 2;
  google.protobuf.Timestamp from = 3;
  google.protobuf.Timestamp to = 4;
  int32 limit = 5;
}

message GetShopperTransactionsResponse {
  repeated ShopperTransactionsData shopper_transactions = 1;
}

message ShopperTransactionsData {
  string psp_reference = 1;
  google.protobuf.Timestamp payment_date = 2;
  common.Money amount = 3;
  bool returning_customer = 4;
}

// Returning Vs New Customer Chart
message CustomerTransactionsChartRequest {
  string store_id = 1;
  optional google.protobuf.Timestamp from = 2;
  CustomerType customer_type = 3;
}

message CustomerTransactionsChartResponse {
  repeated CustomerTransactionsChartData data = 1;
  // Used to determine what the max amount of data is available to update the UI
  TimePeriodRange max_available_date_range  = 2;
}

message CustomerTransactionsChartData {
  // Type will be used on FE to translate the bar chart labels
  TimePeriodRange type = 1;
  // Percentage of returning customers for period
  int32 returning = 2;
  // Percentage of new customers for period
  int32 new = 3;
}

enum CustomerType {
  RETURNING = 0;
  RECURRING = 1;
}

enum TimePeriodRange {
  TWENTY_FOUR = 0;
  SEVEN_DAYS = 1;
  THIRTY_DAYS = 2;
  SIXTY_DAYS = 3;
  NINETY_DAYS = 4;
}

// Transaction stats
message CustomerTransactionsStatsRequest {
  string store_id = 1;
  optional google.protobuf.Timestamp from = 2;
  optional google.protobuf.Timestamp to = 3;
  CustomerType customer_type = 4;
}

message CustomerTransactionsStatsResponse {
  repeated CustomerTransactionsStats stats = 1;
  // Used to determine what the max amount of data is available to update the UI
  TimePeriodRange max_available_date_range  = 2;
}

message CustomerTransactionsStats {
  // Type will be used on FE to translate the stats titles
  CustomerTransactionsStatsType type = 1;
  // All the total properties will be monetary values except for transactions type which is just the total number
  string total = 2;
  string returning_total = 3;
  optional int32 returning_percentage = 4 [deprecated = true];
  optional string returning_customers_percentage = 5;
  string new_total = 6;
  optional int32 new_percentage = 7 [deprecated = true];
  optional string new_customers_percentage = 8;
  string currency_code = 9;
}

enum CustomerTransactionsStatsType {
  SALES = 0;
  TRANSACTIONS = 1;
  ATV = 2;
}

// Deprecated
message QuartilePointsChartRequest {
  string store_id = 1;
}
// Deprecated
message QuartilePointsChartResponse {
  repeated QuartileData quartile_data = 1;
  float median_points = 2; // Used to plot the median line on the chart
}
// Deprecated
message QuartileData {
  string quartile_name = 1;  // e.g., "Bottom Quartile, Lower Quartile, Upper Quartile, Top Quartile"
  int32 customer_count = 2; // Number of customers in this quartile
  optional float avg_points = 3;     // Average points for customers in this quartile
  optional string avg_transaction_value = 4; // Average transaction value
  int32 total_transactions = 5;   // Total transactions for this quartile
  optional float avg_transactions = 6;     // Average transactions per customer
  common.Currency currency_code = 7;  // To show ATV in correct currency on frontend
}

// Spending Distribution Chart
message SpendingDistributionChartRequest {
  string store_id = 1;
}

message SpendingDistributionChartResponse {
  repeated SpendingData spending_data = 1;
}

message SpendingData {
  string country_code = 1;  // e.g., "GB, CN, US"
  string total_sales = 2; // total amount of sales from a country
  int32 total_transactions = 3;   // Total transactions from a country
  string avg_transaction_value = 4; // Average transaction value
  string new_percentage = 5; // percentage of new customers' transactions
  string returning_percentage = 6; // percentage of returning customers' transactions
  common.Currency currency_code = 7;  // To show sales and ATV in correct currency on frontend
}

// Revenue Store Visits Chart
message GetRevenueStoreVisitsChartRequest {
  string store_id = 1;
  optional google.protobuf.Timestamp from = 2; // allow a range to be given for 24hrs, 7 days etc...
  optional google.protobuf.Timestamp to = 3; // allow a range to be given for 24hrs, 7 days etc...
}

message GetRevenueStoreVisitsChartResponse {
  repeated RevenueStoreVisitsData revenue_store_visits = 1;
  common.Currency currency_code = 2;  // To show revenue in correct currency on frontend
}

message RevenueStoreVisitsData {
  float total_revenue = 1; // total revenue for this date/time
  int32 number_of_transactions = 2; // total number of transactions for date/time
  google.protobuf.Timestamp dateTime = 3; // date and time of data
}
