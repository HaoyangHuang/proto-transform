syntax = "proto3";
package com.kodypay.grpc.fx;
import "options/team.proto";
import "com/kodypay/grpc/common/money.proto";

option java_multiple_files = true;
option java_outer_classname = "FxProto";
option java_package = "com.kodypay.grpc.fx";


service KpFxService {
  option (options.team) = PAYMENTS_SERVICES;

  rpc GetFxRates(GetFxRatesRequest) returns (FxRates);
  rpc GetMccAmount(GetMccAmountRequest) returns (GetMccAmountResponse);
  rpc GetRefundMccAmount(RefundMccAmountRequest) returns (RefundMccAmountResponse);
  rpc SaveMccFeePercentage(SaveMccFeePercentageRequest) returns (SaveMccFeePercentageResponse);
  rpc GetMccFeePercentage(GetMccFeePercentageRequest) returns (GetMccFeePercentageResponse);
  rpc CreateMarkupRate(CreateMarkupRateRequest) returns (CreateMarkupRateResponse);
  rpc UpdateMarkupRate(UpdateMarkupRateRequest) returns (UpdateMarkupRateResponse);
  rpc GetMarkupRate(GetMarkupRateRequest) returns (GetMarkupRateResponse);
  rpc DeletePaymentMethodMarkupRate(DeletePaymentMethodMarkupRateRequest) returns (DeleteMarkupRateResponse);
  rpc DeleteCurrencyMarkupRate(DeleteCurrencyMarkupRateRequest) returns (DeleteMarkupRateResponse);
}

message SaveMccFeePercentageRequest {
  string store_id = 1;
  optional string mcc_fee_percentage = 2;
  optional string mcc_merchant_cut_percentage = 3;
}

message SaveMccFeePercentageResponse {}

message GetMccFeePercentageRequest {
  string store_id = 1;
}

message GetMccFeePercentageResponse {
  string store_id = 1;
  string mcc_fee_percentage = 2;
  string mcc_merchant_cut_percentage = 3;
}

message GetMccAmountRequest {
  common.Money store_amount = 1;
  string issuer_currency = 2;
  string store_id = 3;
  bool requires_recent_fx = 4; // whether to attempt to refresh the fx rate
  optional string payment_method = 5;
}

message GetMccAmountResponse {
  common.Money issuer_amount = 1; // with mcc fees
  common.Money store_amount = 2;
  string mcc_store_fees = 3; // ex 3.00
  string mcc_store_fees_merchant_cut = 4; // ex 1.00
  string mcc_fee_percentage = 5;
  string fx_rate = 6;
  string fx_rate_with_markup = 7;
}

message GetFxRatesRequest {
  string base_currency = 1;
  repeated string currencies = 2;
}

message FxRates {
  string base_currency = 1;
  map<string, string> rates = 2;
}

message RefundMccAmountRequest {
  common.Money store_amount = 1;
  string issuer_currency = 2;
  string store_id = 3;
  optional string markup_rate = 4; // if rate used in original amount is to be used
  bool requires_recent_fx = 5; // whether to attempt to refresh the fx rate (above supersedes this)
  optional string payment_method = 6;
}

message RefundMccAmountResponse {
  common.Money issuer_amount = 1; // converted store amount in issuer currency without markup
  common.Money issuer_amount_with_markup = 2; // converted store amount in issuer currency with markup
  common.Money store_amount = 3;
  string mcc_store_fee = 4; // ex 3.00 markup amount in store currency
  string mcc_fee_percentage = 5; // markup in percentage
  string fx_rate = 6; //fx rate applied on the day of request
  string fx_rate_with_markup = 7;
}

message CreateMarkupRateRequest{
    MarkupRateType type = 1;
    optional string store_id = 2;
    repeated CurrencyRate markup_rate_data = 3;
}

message CreateMarkupRateResponse{
    Status status = 1;
    optional string status_description = 2;
}

message UpdateMarkupRateRequest{
  MarkupRateType type = 1;
  optional string store_id = 2;
  /**
    Map of currency to default store mark up rate at currency level
    i.e. mapOf("GBP" to "1.34")
   */
  map<string, string> currency_mark_up_rate = 3;
  /**
    Map of currency to list payment method rates
    i.e. mapOf("GBP" to PaymentMethodRates(listOf(PaymentMethodRate(markupRate = "1.34", paymentMethodKey = "AMEX" )))
   */
  map<string, PaymentMethodRates> currency_payment_method_rates = 4; //
}

message PaymentMethodRates{
  repeated PaymentMethodRate payment_method_rate = 1;
}
message UpdateMarkupRateResponse{
  MarkupRateType type = 1;
  optional string store_id = 2;
  repeated CurrencyRate markup_rate_data = 3;
  Status status = 4;
}

message CurrencyRate {
  string markup_rate = 1;
  string currency = 2;
  repeated PaymentMethodRate payment_method_rate = 3;
}

message PaymentMethodRate {
  string markup_rate = 1;
  string payment_method_key = 2;
}

message GetMarkupRateRequest{
  MarkupRateType type = 1;
  optional string store_id = 2;
}

message GetMarkupRateResponse{
  MarkupRateType type = 1;
  optional string store_id = 2;
  repeated CurrencyRate markup_rate_data = 3;
}

message DeletePaymentMethodMarkupRateRequest{
  MarkupRateType type = 1;
  optional string store_id = 2;
  map<string, PaymentMethodList> currency_payment_method_rates = 3;
}

message DeleteCurrencyMarkupRateRequest{
  MarkupRateType type = 1;
  optional string store_id = 2;
  repeated string currencies = 3;
}

message PaymentMethodList{
  repeated string payment_methods = 1;
}

message DeleteMarkupRateResponse{
  Status status = 1;
}

enum MarkupRateType {
  DEFAULT = 0;
  STORE = 1 ;
}

enum Status {
  SUCCESS = 0;
  FAILED = 1 ;
}
